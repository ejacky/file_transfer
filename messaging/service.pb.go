// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package messaging

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Ok      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}

var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}

func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

type Chunk struct {
	// Types that are valid to be assigned to Data:
	//	*Chunk_Content
	//	*Chunk_Info
	Data                 isChunk_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

type isChunk_Data interface {
	isChunk_Data()
}

type Chunk_Content struct {
	Content []byte `protobuf:"bytes,1,opt,name=Content,proto3,oneof"`
}

type Chunk_Info struct {
	Info *FileInfo `protobuf:"bytes,2,opt,name=Info,proto3,oneof"`
}

func (*Chunk_Content) isChunk_Data() {}

func (*Chunk_Info) isChunk_Data() {}

func (m *Chunk) GetData() isChunk_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Chunk) GetContent() []byte {
	if x, ok := m.GetData().(*Chunk_Content); ok {
		return x.Content
	}
	return nil
}

func (m *Chunk) GetInfo() *FileInfo {
	if x, ok := m.GetData().(*Chunk_Info); ok {
		return x.Info
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Chunk) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Chunk_Content)(nil),
		(*Chunk_Info)(nil),
	}
}

type FileInfo struct {
	FileType             string   `protobuf:"bytes,1,opt,name=FileType,proto3" json:"FileType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

type UploadStatus struct {
	Message              string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 UploadStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=messaging.UploadStatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadStatus) Reset()         { *m = UploadStatus{} }
func (m *UploadStatus) String() string { return proto.CompactTextString(m) }
func (*UploadStatus) ProtoMessage()    {}
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *UploadStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadStatus.Unmarshal(m, b)
}
func (m *UploadStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadStatus.Marshal(b, m, deterministic)
}
func (m *UploadStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadStatus.Merge(m, src)
}
func (m *UploadStatus) XXX_Size() int {
	return xxx_messageInfo_UploadStatus.Size(m)
}
func (m *UploadStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UploadStatus proto.InternalMessageInfo

func (m *UploadStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadStatus) GetCode() UploadStatusCode {
	if m != nil {
		return m.Code
	}
	return UploadStatusCode_Unknown
}

func init() {
	proto.RegisterEnum("messaging.UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
	proto.RegisterType((*Chunk)(nil), "messaging.Chunk")
	proto.RegisterType((*FileInfo)(nil), "messaging.FileInfo")
	proto.RegisterType((*UploadStatus)(nil), "messaging.UploadStatus")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x9b, 0x52, 0x53, 0xf7, 0x36, 0x47, 0x78, 0x1e, 0x2c, 0xf5, 0x32, 0x7a, 0x90, 0xea,
	0xa1, 0x42, 0x77, 0xf0, 0x6e, 0x61, 0x6e, 0x07, 0x11, 0xaa, 0x13, 0x3c, 0x46, 0x1b, 0x67, 0x69,
	0x4d, 0xca, 0x9a, 0x2a, 0xfe, 0xf7, 0xb2, 0x94, 0x94, 0x22, 0x78, 0xcb, 0xcb, 0xf7, 0xbd, 0xdf,
	0xfb, 0xf8, 0xe0, 0xa4, 0x15, 0xfb, 0xaf, 0xf2, 0x4d, 0x24, 0xcd, 0x5e, 0x69, 0x85, 0x93, 0x4f,
	0xd1, 0xb6, 0x7c, 0x57, 0xca, 0x5d, 0xf4, 0x0c, 0x47, 0xd9, 0x47, 0x27, 0x2b, 0x0c, 0xc1, 0xcf,
	0x94, 0xd4, 0x42, 0xea, 0x80, 0x2c, 0x48, 0x3c, 0x5b, 0x3b, 0xb9, 0xfd, 0xc0, 0x4b, 0xf0, 0x36,
	0xf2, 0x5d, 0x05, 0xee, 0x82, 0xc4, 0xd3, 0xf4, 0x34, 0x19, 0xd6, 0x93, 0x55, 0x59, 0x8b, 0x83,
	0xb4, 0x76, 0x72, 0x63, 0xb9, 0xa5, 0xe0, 0x15, 0x5c, 0xf3, 0xe8, 0x02, 0x8e, 0xad, 0x86, 0x61,
	0xff, 0x7e, 0xfa, 0x69, 0x84, 0x61, 0x4f, 0xf2, 0x61, 0x8e, 0x5e, 0x60, 0xb6, 0x6d, 0x6a, 0xc5,
	0x8b, 0x47, 0xcd, 0x75, 0xd7, 0x62, 0x00, 0xfe, 0xbd, 0xa1, 0x5b, 0xab, 0x1d, 0xf1, 0x1a, 0xbc,
	0x4c, 0x15, 0xc2, 0x84, 0x98, 0xa7, 0xe7, 0xa3, 0x10, 0x63, 0xc0, 0xc1, 0x92, 0x1b, 0xe3, 0xd5,
	0x12, 0xd8, 0x5f, 0x05, 0xa7, 0xe0, 0x6f, 0x65, 0x25, 0xd5, 0xb7, 0x64, 0x0e, 0x52, 0x70, 0x1f,
	0x2a, 0x46, 0x10, 0x80, 0xae, 0x78, 0x59, 0x8b, 0x82, 0xb9, 0xe9, 0x06, 0xe6, 0x77, 0x5d, 0xbf,
	0xd5, 0x57, 0x86, 0x37, 0x40, 0x7b, 0x0c, 0xb2, 0xd1, 0x4d, 0x53, 0x5a, 0x78, 0xf6, 0x4f, 0x8a,
	0xc8, 0x89, 0xc9, 0x2b, 0x35, 0x65, 0x2f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x85, 0xc4, 0xa6,
	0x10, 0x7d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GuploadServiceClient is the client API for GuploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GuploadServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (GuploadService_UploadClient, error)
}

type guploadServiceClient struct {
	cc *grpc.ClientConn
}

func NewGuploadServiceClient(cc *grpc.ClientConn) GuploadServiceClient {
	return &guploadServiceClient{cc}
}

func (c *guploadServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (GuploadService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GuploadService_serviceDesc.Streams[0], "/messaging.GuploadService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &guploadServiceUploadClient{stream}
	return x, nil
}

type GuploadService_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type guploadServiceUploadClient struct {
	grpc.ClientStream
}

func (x *guploadServiceUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *guploadServiceUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GuploadServiceServer is the server API for GuploadService service.
type GuploadServiceServer interface {
	Upload(GuploadService_UploadServer) error
}

// UnimplementedGuploadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGuploadServiceServer struct {
}

func (*UnimplementedGuploadServiceServer) Upload(srv GuploadService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}

func RegisterGuploadServiceServer(s *grpc.Server, srv GuploadServiceServer) {
	s.RegisterService(&_GuploadService_serviceDesc, srv)
}

func _GuploadService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GuploadServiceServer).Upload(&guploadServiceUploadServer{stream})
}

type GuploadService_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type guploadServiceUploadServer struct {
	grpc.ServerStream
}

func (x *guploadServiceUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *guploadServiceUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GuploadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.GuploadService",
	HandlerType: (*GuploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _GuploadService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
